//установка
npm install -g nuxt
npm init nuxt-app name_folder

//сборка
 npm run generate - а затем просто загрузите каталог dist на свой хостинг! Вот и все! Вместе с SSR

//роутинг по умолчанию из коробки
1. создаем папку в папке pages например name_folder
2. в этой папке создаем файл index.vue
3. в папке pages в файле index.vue - <router-link to="/name_folder">анкорный текст</router-link>


//установка
npm install -g nuxt
npm init nuxt-app name_folder

//сборка
 npm run generate - а затем просто загрузите каталог dist на свой хостинг! Вот и все! Вместе с SSR

//роутинг по умолчанию из коробки
1. создаем папку в папке pages например name_folder
2. в этой папке создаем файл index.vue
3. в папке pages в файле index.vue - <router-link to="/name_folder">анкорный текст</router-link>


//import как происходит
import Some from '~/components/file.vue'  - тильда указывает на корень

//страница not found 404
в папке layouts создаем файл error.vue

//в корне проекта есть конфиг nuxt.config.js
 - mode:'universal'  это с SSR
 -loading  это ползунок загрузки вверху страницы

-------------------роутинги---------------------------------------------------

@click='$router.push("/")' на самом элементе или можно прописать в методе -> this.$router.push("/названиеСТР")
  
в теге <a href="page">page</a> - будет с перезагрузкой страницы

  <router-link to="/page">page</router-link> - будет динамически без перезагрузки
  <router-link to="/a" exact> - exact определяет когда ссылка активна все зависимости от с /a/ или /a.
  <router-link no-prefetch to="/page"> - no-prefetch заставляет подгружать страницу только при обращении,а не при загрузке страницы

! создаем папку с файлом index.vue -> для роутинга указываем лишь название папки to="/название папки"
!для динамических страниц в папке -> создаем страницу с названием  _названиеПринимаегоПараметра.vue ->
	передаем в неё от корневой в папке страницы(index.vue) params-> this.$router.push('/папка/ + чтото')

! для передачи параметров(query,params) в методе но не async-> this.$router.push({ 
			 		query: { search: true }
			 	}) 
и принять в другом компоненте this.$route.query.search -> выдаст true
	
------------------------axios https://axios.nuxtjs.org/setup-------------------------------

    npm install @nuxtjs/axios
    в файле nuxt.config.js -> 
	module.exports = {
          modules: [
           '@nuxtjs/axios',
          ],
       }

----------------КАК РАБОТАЕТ AXIOS в NUXT -> пример -----------------------------------

async asyncData({ $axios }){
	var data = await $axios.$get('https://jsonplaceholder.typicode.com/users');
	*запросов может много но return ОДИН, в него и добавляем все переменные с запросом
		return{data}
     },

В methods через this если изначально установлен -> await this.$axios.$get('http://someUrl.com')

------------- КАК РАБОТАЕТ FETCH в NUXT ------------------------------------------------------

async asyncData(){
   var data = await fetch('https://jsonplaceholder.typicode.com/users?_limit=5').then(res=>res.json());
	return{
		data
	    }
	}
 !!! в методе работает через async await -> пример следующий
	async nameForSearch(){ // добавляем к методу async, а к fetch добавляем await
		var data = await fetch('https://jsonplaceholder.typicode.com/users?_limit=5').then(res=>res.json());
				console.log(data)			
										
			},
 !!! через POST необходимо передавать данные через FormData -> (также необходимо установить пакет npm install --save form-data)
	var FormData = require('form-data');
	var obj = new FormData();
        obj.append('category', 'comedy');

fetch('https://maximum-movies.com/php-films-res',{
          method: 'post',
          body:formData
       }).then((res)=>{
        console.log(res.json())
      })
	.then((data) => {
          console.log(data)         
            return data;
        })

------для доступа определенных ресурсов к api в .htaccess можно прописать следующее -> ---------------------------

<IfModule mod_headers.c>
    Header set Access-Control-Allow-Origin http://название ресурса
</IfModule>

-------------------layouts--------------------------------------------------------

создаем файл.vue в папке layouts
-> (прописываем стили и компоненты, которые нужны в нашем layouts)
-> в корневом диве в конце пишем <nuxt />

-> в странице где хотим использовать этот layouts пишем в script -> export default {
	layout:'его-название-без-точки'
}

-------- ОДНА страница с приемом и отображением динамических параметров ------------------------------

	<button @click='change(item.id)'>Редактировать</button> // передаем какие-то данные методу в нашем случаи id полученный откуда-то

	methods:{
	change(id){
			this.$router.push('/'+ id) // делаем роутинг на страницу с нижним подчеркиванием _id, которая будет принимать
//параметр
		}	
	}
создаем страницу _id.vue , которая принимает params-> {{$route.params.id}} - id это ключ в котором лежит значение
//так же можно принять асинхронно в async asyncData -> async asyncData({params}){
		
		var id = params.id //получили динамический параметр от главной страницы
	}
ДАЛЕЕ можно на основании этих данных делать в async asyncData запросы POST,GET и получать данные для серверного рендеринга COOL!!!

-------- ДИНАМИЧЕСКИЕ meta Тэги ----------------------------------------------------------------

- делаем асинхронный запрос в async asyncData (GET или POST) делаем return данных; -> пример
	async asyncData({params}){
	var name = params.video //получили параметры переданные в корневой странице в папке

	var FormData = require('form-data'); //собрали данные для отправки через FormData
	var obj = new FormData();
	obj.append('nameFilm', name);

	var req = await fetch('https://maximum-movies.com/search-for-async',{ //делаем POST запрос
	          method: 'post',
	          body:obj
		       }).then((res) => {
		            return res.json();
		        })
		        .then((data) => {
		          console.log(data)
		            return data;
		        })
			return{req}
},
	

- ниже после async asyncData прописываем в head(){
		return{
			title: this.req.name + 'что нибудь что еще надо',
			meta:[
				{ hid: 'description', name: 'description', content: this.req.description + 'что-то еще' }
			]
		}
	}

----------------LAZY-LOAD для всего----------------------------

npm i nuxt-lazy-load
https://gitlab.com/broj42/nuxt-lazy-load#README

