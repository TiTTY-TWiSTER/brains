//установка
npm install -g nuxt
npm init nuxt-app name_folder

//сборка
 npm run generate - а затем просто загрузите каталог dist на свой хостинг! Вот и все! Вместе с SSR

//роутинг по умолчанию из коробки
1. создаем папку в папке pages например name_folder
2. в этой папке создаем файл index.vue
3. в папке pages в файле index.vue - <router-link to="/name_folder">анкорный текст</router-link>


//установка
npm install -g nuxt
npm init nuxt-app name_folder

//сборка
 npm run generate - а затем просто загрузите каталог dist на свой хостинг! Вот и все! Вместе с SSR

//роутинг по умолчанию из коробки
1. создаем папку в папке pages например name_folder
2. в этой папке создаем файл index.vue
3. в папке pages в файле index.vue - <router-link to="/name_folder">анкорный текст</router-link>


//import как происходит
import Some from '~/components/file.vue'  - тильда указывает на корень

//страница not found 404
в папке layouts создаем файл error.vue

//в корне проекта есть конфиг nuxt.config.js
 - mode:'universal'  это с SSR
 -loading  это ползунок загрузки вверху страницы

//роутинги
@click='$router.push("/")' на самом элементе или можно прописать в методе -> this.$router.push("/названиеСТР")
  
в теге <a href="page">page</a> - будет с перезагрузкой страницы

  <router-link to="/page">page</router-link> - будет динамически без перезагрузки
  <router-link to="/a" exact> - exact определяет когда ссылка активна все зависимости от с /a/ или /a.
  <router-link no-prefetch to="/page"> - no-prefetch заставляет подгружать страницу только при обращении,а не при загрузке страницы

! для передачи параметров(query,params) в методе но не async-> this.$router.push({ 
			 		query: { search: true }
			 	}) 
и принять в другом компоненте this.$route.query.search -> выдаст true
	
//axios https://axios.nuxtjs.org/setup
    npm install @nuxtjs/axios
    в файле nuxt.config.js -> 
	module.exports = {
          modules: [
           '@nuxtjs/axios',
          ],
       }

--- КАК РАБОТАЕТ AXIOS в NUXT -> пример ---

data(){
	return{
		data:[]
	}
     },
async asyncData({ $axios }){
	var data = await $axios.$get('https://jsonplaceholder.typicode.com/users');
	*запросов может много но return ОДИН, в него и добавляем все переменные с запросом
		return{data}
     },

--- КАК РАБОТАЕТ FETCH в NUXT ---
data(){
	return{
		datas:[]
	}
     },
async asyncData(){
   var data = await fetch('https://jsonplaceholder.typicode.com/users?_limit=5').then(res=>res.json());
	return{
		datas:data
	    }
	}
 !!! в методе работает через async await -> пример следующий
	async nameForSearch(){ // добавляем к методу async, а к fetch добавляем await
		var data = await fetch('https://jsonplaceholder.typicode.com/users?_limit=5').then(res=>res.json());
				console.log(data)			
										
			},
 *** для доступа определенных ресурсов к api в .htaccess можно прописать следующее ->
<IfModule mod_headers.c>
    Header set Access-Control-Allow-Origin http://название ресурса
</IfModule>

// layouts
создаем файл.vue в папке layouts
-> (прописываем стили и компоненты, которые нужны в нашем layouts)
-> в корневом диве в конце пишем <nuxt />

-> в странице где хотим использовать этот layouts пишем в script -> export default {
	layout:'его-название-без-точки'
}
